;; Analyzed by ClojureScript 0.0-3196
{:use-macros nil, :excludes #{remove replace next}, :name clojure.zip, :imports nil, :requires nil, :uses nil, :defs {rightmost {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns the loc of the rightmost sibling of the node at this loc, or self", :end-column 16, :end-line 143, :column 7, :line 143, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/rightmost, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 16, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the rightmost sibling of the node at this loc, or self", :test true}, insert-child {:protocol-inline nil, :meta {:arglists (quote ([loc item])), :doc "Inserts the item as the leftmost child of the node at this loc,\n  without moving", :end-column 19, :end-line 195, :column 7, :line 195, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/insert-child, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 19, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the leftmost child of the node at this loc,\n  without moving", :test true}, left {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns the loc of the left sibling of the node at this loc, or nil", :end-column 11, :end-line 151, :column 7, :line 151, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/left, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the left sibling of the node at this loc, or nil", :test true}, path {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns a seq of nodes leading to this loc", :end-column 11, :end-line 83, :column 7, :line 83, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/path, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of nodes leading to this loc", :test true}, leftmost {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns the loc of the leftmost sibling of the node at this loc, or self", :end-column 15, :end-line 158, :column 7, :line 158, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/leftmost, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 15, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the leftmost sibling of the node at this loc, or self", :test true}, append-child {:protocol-inline nil, :meta {:arglists (quote ([loc item])), :doc "Inserts the item as the rightmost child of the node at this loc,\n  without moving", :end-column 19, :end-line 201, :column 7, :line 201, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/append-child, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 19, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the rightmost child of the node at this loc,\n  without moving", :test true}, branch? {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns true if the node at loc is a branch", :end-column 14, :end-line 65, :column 7, :line 65, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/branch?, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 14, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns true if the node at loc is a branch", :test true}, children {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns a seq of the children of node at loc, which must be a branch", :end-column 15, :end-line 70, :column 7, :line 70, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/children, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 15, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of the children of node at loc, which must be a branch", :test true}, remove {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk.", :end-column 13, :end-line 238, :column 7, :line 238, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/remove, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 13, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk.", :test true}, down {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children", :end-column 11, :end-line 99, :column 7, :line 99, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/down, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children", :test true}, replace {:protocol-inline nil, :meta {:arglists (quote ([loc node])), :doc "Replaces the node at this loc, without moving", :end-column 14, :end-line 184, :column 7, :line 184, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/replace, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 14, :method-params ([loc node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc node])), :doc "Replaces the node at this loc, without moving", :test true}, zipper {:protocol-inline nil, :meta {:arglists (quote ([branch? children make-node root])), :doc "Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.", :end-column 13, :end-line 19, :column 7, :line 19, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/zipper, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 13, :method-params ([branch? children make-node root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 4, :fn-var true, :arglists (quote ([branch? children make-node root])), :doc "Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.", :test true}, end? {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns true if loc represents the end of a depth-first walk", :end-column 11, :end-line 233, :column 7, :line 233, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/end?, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns true if loc represents the end of a depth-first walk", :test true}, edit {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(loc f args)], :arglists [[loc f & args]], :arglists-meta (nil)}, :arglists (quote ([loc f & args])), :doc "Replaces the node at this loc with the value of (f node args)", :end-column 11, :end-line 190, :column 7, :line 190, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/edit, :variadic true, :file "resources/public/js/out/clojure/zip.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(loc f args)], :arglists [[loc f & args]], :arglists-meta (nil)}, :method-params [(loc f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 2, :fn-var true, :arglists [[loc f & args]], :doc "Replaces the node at this loc with the value of (f node args)", :test true}, make-node {:protocol-inline nil, :meta {:arglists (quote ([loc node children])), :doc "Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor.", :end-column 16, :end-line 77, :column 7, :line 77, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/make-node, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 16, :method-params ([loc node children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([loc node children])), :doc "Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor.", :test true}, vector-zip {:protocol-inline nil, :meta {:arglists (quote ([root])), :doc "Returns a zipper for nested vectors, given a root vector", :end-column 17, :end-line 43, :column 7, :line 43, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/vector-zip, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 17, :method-params ([root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root])), :doc "Returns a zipper for nested vectors, given a root vector", :test true}, node {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns the node at loc", :end-column 11, :end-line 61, :column 7, :line 61, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/node, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the node at loc", :test true}, up {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns the loc of the parent of the node at this loc, or nil if at\n  the top", :end-column 9, :end-line 112, :column 7, :line 112, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/up, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 9, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the parent of the node at this loc, or nil if at\n  the top", :test true}, insert-right {:protocol-inline nil, :meta {:arglists (quote ([loc item])), :doc "Inserts the item as the right sibling of the node at this loc,\n  without moving", :end-column 19, :end-line 175, :column 7, :line 175, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/insert-right, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 19, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the right sibling of the node at this loc,\n  without moving", :test true}, rights {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns a seq of the right siblings of this loc", :end-column 13, :end-line 93, :column 7, :line 93, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/rights, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 13, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of the right siblings of this loc", :test true}, root {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "zips all the way up and returns the root node, reflecting any\n changes.", :end-column 11, :end-line 125, :column 7, :line 125, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/root, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "zips all the way up and returns the root node, reflecting any\n changes.", :test true}, next {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there.", :end-column 11, :end-line 207, :column 7, :line 207, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/next, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there.", :test true}, seq-zip {:protocol-inline nil, :meta {:arglists (quote ([root])), :doc "Returns a zipper for nested sequences, given a root sequence", :end-column 14, :end-line 35, :column 7, :line 35, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/seq-zip, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 14, :method-params ([root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root])), :doc "Returns a zipper for nested sequences, given a root sequence", :test true}, insert-left {:protocol-inline nil, :meta {:arglists (quote ([loc item])), :doc "Inserts the item as the left sibling of the node at this loc,\n without moving", :end-column 18, :end-line 166, :column 7, :line 166, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/insert-left, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 18, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the left sibling of the node at this loc,\n without moving", :test true}, prev {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil.", :end-column 11, :end-line 222, :column 7, :line 222, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/prev, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil.", :test true}, right {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns the loc of the right sibling of the node at this loc, or nil", :end-column 12, :end-line 136, :column 7, :line 136, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/right, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 12, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the right sibling of the node at this loc, or nil", :test true}, lefts {:protocol-inline nil, :meta {:arglists (quote ([loc])), :doc "Returns a seq of the left siblings of this loc", :end-column 12, :end-line 88, :column 7, :line 88, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/lefts, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 12, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of the left siblings of this loc", :test true}, xml-zip {:protocol-inline nil, :meta {:arglists (quote ([root])), :doc "Returns a zipper for xml elements (as from xml/parse),\n  given a root element", :end-column 14, :end-line 51, :column 7, :line 51, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/zip.cljs"}, :name clojure.zip/xml-zip, :variadic false, :file "resources/public/js/out/clojure/zip.cljs", :end-column 14, :method-params ([root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root])), :doc "Returns a zipper for xml elements (as from xml/parse),\n  given a root element", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:zip/make-node :zip/children :zip/branch? :content :pnodes :l :r :ppath :changed? :end], :seen #{:ppath :zip/branch? :r :zip/children :content :l :zip/make-node :pnodes :changed? :end}}, :doc "Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet"}