;; Analyzed by ClojureScript 0.0-3196
{:defs {union {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [s1] [s1 s2]), :arglists ([] [s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil nil)}, :arglists (quote ([] [s1] [s1 s2] [s1 s2 & sets])), :doc "Return a set that is the union of the input sets", :end-column 12, :end-line 20, :column 7, :line 20, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/union, :variadic true, :file "resources/public/js/out/clojure/set.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [s1] [s1 s2]), :arglists ([] [s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil nil)}, :method-params ([] [s1] [s1 s2]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists ([] [s1] [s1 s2] [s1 s2 & sets]), :doc "Return a set that is the union of the input sets", :test true}, map-invert {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Returns the map with the vals mapped to the keys.", :end-column 17, :end-line 98, :column 7, :line 98, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/map-invert, :variadic false, :file "resources/public/js/out/clojure/set.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the map with the vals mapped to the keys.", :test true}, join {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([xrel yrel] [xrel yrel km]), :arglists ([xrel yrel] [xrel yrel km]), :arglists-meta (nil nil)}, :arglists (quote ([xrel yrel] [xrel yrel km])), :doc "When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.", :end-column 11, :end-line 102, :column 7, :line 102, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/join, :variadic false, :file "resources/public/js/out/clojure/set.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([xrel yrel] [xrel yrel km]), :arglists ([xrel yrel] [xrel yrel km]), :arglists-meta (nil nil)}, :method-params ([xrel yrel] [xrel yrel km]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 3, :fn-var true, :arglists ([xrel yrel] [xrel yrel km]), :doc "When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.", :test true}, select {:protocol-inline nil, :meta {:arglists (quote ([pred xset])), :doc "Returns a set of the elements for which pred is true", :end-column 13, :end-line 62, :column 7, :line 62, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/select, :variadic false, :file "resources/public/js/out/clojure/set.cljs", :end-column 13, :method-params ([pred xset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred xset])), :doc "Returns a set of the elements for which pred is true", :test true}, intersection {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([s1] [s1 s2]), :arglists ([s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil)}, :arglists (quote ([s1] [s1 s2] [s1 s2 & sets])), :doc "Return a set that is the intersection of the input sets", :end-column 19, :end-line 32, :column 7, :line 32, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/intersection, :variadic true, :file "resources/public/js/out/clojure/set.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([s1] [s1 s2]), :arglists ([s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil)}, :method-params ([s1] [s1 s2]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists ([s1] [s1 s2] [s1 s2 & sets]), :doc "Return a set that is the intersection of the input sets", :test true}, superset? {:protocol-inline nil, :meta {:arglists (quote ([set1 set2])), :doc "Is set1 a superset of set2?", :end-column 16, :end-line 138, :column 7, :line 138, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/superset?, :variadic false, :file "resources/public/js/out/clojure/set.cljs", :end-column 16, :method-params ([set1 set2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set1 set2])), :doc "Is set1 a superset of set2?", :test true}, index {:protocol-inline nil, :meta {:arglists (quote ([xrel ks])), :doc "Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.", :end-column 12, :end-line 88, :column 7, :line 88, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/index, :variadic false, :file "resources/public/js/out/clojure/set.cljs", :end-column 12, :method-params ([xrel ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xrel ks])), :doc "Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.", :test true}, bubble-max-key {:protocol-inline nil, :meta {:arglists (quote ([k coll])), :private true, :end-column 22, :end-line 14, :column 8, :line 14, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :private true, :name clojure.set/bubble-max-key, :variadic false, :file "resources/public/js/out/clojure/set.cljs", :end-column 22, :method-params ([k coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k coll])), :test true}, subset? {:protocol-inline nil, :meta {:arglists (quote ([set1 set2])), :doc "Is set1 a subset of set2?", :end-column 14, :end-line 132, :column 7, :line 132, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/subset?, :variadic false, :file "resources/public/js/out/clojure/set.cljs", :end-column 14, :method-params ([set1 set2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set1 set2])), :doc "Is set1 a subset of set2?", :test true}, rename {:protocol-inline nil, :meta {:arglists (quote ([xrel kmap])), :doc "Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap", :end-column 13, :end-line 83, :column 7, :line 83, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/rename, :variadic false, :file "resources/public/js/out/clojure/set.cljs", :end-column 13, :method-params ([xrel kmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xrel kmap])), :doc "Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap", :test true}, rename-keys {:protocol-inline nil, :meta {:arglists (quote ([map kmap])), :doc "Returns the map with the keys in kmap renamed to the vals in kmap", :end-column 18, :end-line 73, :column 7, :line 73, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/rename-keys, :variadic false, :file "resources/public/js/out/clojure/set.cljs", :end-column 18, :method-params ([map kmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map kmap])), :doc "Returns the map with the keys in kmap renamed to the vals in kmap", :test true}, project {:protocol-inline nil, :meta {:arglists (quote ([xrel ks])), :doc "Returns a rel of the elements of xrel with only the keys in ks", :end-column 14, :end-line 68, :column 7, :line 68, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/project, :variadic false, :file "resources/public/js/out/clojure/set.cljs", :end-column 14, :method-params ([xrel ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xrel ks])), :doc "Returns a rel of the elements of xrel with only the keys in ks", :test true}, difference {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params ([s1] [s1 s2]), :arglists ([s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil)}, :arglists (quote ([s1] [s1 s2] [s1 s2 & sets])), :doc "Return a set that is the first set without elements of the remaining sets", :end-column 17, :end-line 47, :column 7, :line 47, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/clojure/set.cljs"}, :name clojure.set/difference, :variadic true, :file "resources/public/js/out/clojure/set.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([s1] [s1 s2]), :arglists ([s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil)}, :method-params ([s1] [s1 s2]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists ([s1] [s1 s2] [s1 s2 & sets]), :doc "Return a set that is the first set without elements of the remaining sets", :test true}}, :imports nil, :requires nil, :uses nil, :require-macros nil, :use-macros nil, :excludes #{}, :doc "Set operations such as union/intersection.", :name clojure.set}