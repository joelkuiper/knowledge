;; Analyzed by ClojureScript 0.0-3196
{:defs {assoc-in! {:protocol-inline nil, :meta {:arglists (quote ([ks v])), :doc "Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created.", :end-column 16, :end-line 41, :column 7, :line 41, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/assoc-in!, :variadic false, :file "resources/public/js/out/reagent/session.cljs", :end-column 16, :method-params ([ks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ks v])), :doc "Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created.", :test true}, remove! {:protocol-inline nil, :meta {:arglists (quote ([k])), :doc "Remove a key from the session", :end-column 14, :end-line 36, :column 7, :line 36, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/remove!, :variadic false, :file "resources/public/js/out/reagent/session.cljs", :end-column 14, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Remove a key from the session", :test true}, update-in! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ks f args)], :arglists [[ks f & args]], :arglists-meta (nil)}, :arglists (quote ([ks f & args])), :doc "'Updates' a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.", :end-column 17, :end-line 64, :column 7, :line 64, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/update-in!, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ks f args)], :arglists [[ks f & args]], :arglists-meta (nil)}, :method-params [(ks f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists [[ks f & args]], :doc "'Updates' a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.", :test true}, get-in! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ks [default])], :arglists [[ks & [default]]], :arglists-meta (nil)}, :arglists (quote ([ks & [default]])), :doc "Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.", :end-column 14, :end-line 56, :column 7, :line 56, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/get-in!, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ks [default])], :arglists [[ks & [default]]], :arglists-meta (nil)}, :method-params [(ks [default])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists [[ks & [default]]], :doc "Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.", :test true}, get {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(k [default])], :arglists [[k & [default]]], :arglists-meta (nil)}, :arglists (quote ([k & [default]])), :doc "Get the key's value from the session, returns nil if it doesn't exist.", :end-column 10, :end-line 8, :column 7, :line 8, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/get, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(k [default])], :arglists [[k & [default]]], :arglists-meta (nil)}, :method-params [(k [default])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists [[k & [default]]], :doc "Get the key's value from the session, returns nil if it doesn't exist.", :test true}, reset! {:protocol-inline nil, :meta {:arglists (quote ([m])), :end-column 13, :end-line 33, :column 7, :line 33, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/reset!, :variadic false, :file "resources/public/js/out/reagent/session.cljs", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, get! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(k [default])], :arglists [[k & [default]]], :arglists-meta (nil)}, :arglists (quote ([k & [default]])), :doc "Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.", :end-column 11, :end-line 49, :column 7, :line 49, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/get!, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(k [default])], :arglists [[k & [default]]], :arglists-meta (nil)}, :method-params [(k [default])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists [[k & [default]]], :doc "Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.", :test true}, state {:meta {:end-column 11, :end-line 6, :column 6, :line 6, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :file "resources/public/js/out/reagent/session.cljs", :line 6, :column 1, :end-line 6, :end-column 11, :test true, :name reagent.session/state}, swap! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists [[f & args]], :arglists-meta (nil)}, :arglists (quote ([f & args])), :doc "Replace the current session's value with the result of executing f with\n  the current value and args.", :end-column 12, :end-line 22, :column 7, :line 22, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/swap!, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists [[f & args]], :arglists-meta (nil)}, :method-params [(f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists [[f & args]], :doc "Replace the current session's value with the result of executing f with\n  the current value and args.", :test true}, clear! {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Remove all data from the session and start over cleanly.", :end-column 13, :end-line 28, :column 7, :line 28, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/clear!, :variadic false, :file "resources/public/js/out/reagent/session.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Remove all data from the session and start over cleanly.", :test true}, put! {:protocol-inline nil, :meta {:arglists (quote ([k v])), :end-column 11, :end-line 13, :column 7, :line 13, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/put!, :variadic false, :file "resources/public/js/out/reagent/session.cljs", :end-column 11, :method-params ([k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k v])), :test true}, get-in {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ks [default])], :arglists [[ks & [default]]], :arglists-meta (nil)}, :arglists (quote ([ks & [default]])), :doc "Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.", :end-column 13, :end-line 16, :column 7, :line 16, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/session.cljs"}, :name reagent.session/get-in, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ks [default])], :arglists [[ks & [default]]], :arglists-meta (nil)}, :method-params [(ks [default])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists [[ks & [default]]], :doc "Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.", :test true}}, :imports nil, :requires {reagent.core reagent.core, reagent reagent.core}, :uses {atom reagent.core}, :require-macros nil, :use-macros nil, :excludes #{get reset! swap! get-in}, :doc nil, :name reagent.session}