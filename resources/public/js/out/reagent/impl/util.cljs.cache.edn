;; Analyzed by ClojureScript 0.0-3196
{:use-macros {log reagent.debug, dbg reagent.debug, .' reagent.interop, warn reagent.debug, .! reagent.interop}, :excludes #{}, :name reagent.impl.util, :imports nil, :requires {string clojure.string, clojure.string clojure.string, reagent.interop reagent.interop, reagent.debug reagent.debug}, :uses nil, :defs {get-props {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 16, :end-line 25, :column 7, :line 25, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/get-props, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, get-argv {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 15, :end-line 22, :column 7, :line 22, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/get-argv, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 15, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, merge-props {:protocol-inline nil, :meta {:arglists (quote ([p1 p2])), :end-column 18, :end-line 96, :column 7, :line 96, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/merge-props, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 18, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2])), :test true}, re-render-component {:protocol-inline nil, :meta {:arglists (quote ([comp container])), :end-column 26, :end-line 130, :column 7, :line 130, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/re-render-component, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 26, :method-params ([comp container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp container])), :test true}, force-update-all {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 23, :end-line 137, :column 7, :line 137, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/force-update-all, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, capitalize {:protocol-inline nil, :meta {:arglists (quote ([s])), :end-column 17, :end-line 54, :column 7, :line 54, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/capitalize, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :test true}, cached-react-class {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 25, :end-line 34, :column 7, :line 34, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/cached-react-class, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, dash-to-camel {:protocol-inline nil, :meta {:arglists (quote ([dashed])), :end-column 20, :end-line 59, :column 7, :line 59, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/dash-to-camel, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 20, :method-params ([dashed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dashed])), :test true}, reagent-component? {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 25, :end-line 31, :column 7, :line 31, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/reagent-component?, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, dont-camel-case {:meta {:end-column 21, :end-line 52, :column 6, :line 52, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :file "resources/public/js/out/reagent/impl/util.cljs", :line 52, :column 1, :end-line 52, :end-column 21, :test true, :name reagent.impl.util/dont-camel-case}, merge-style {:protocol-inline nil, :meta {:arglists (quote ([p1 p2])), :private true, :end-column 19, :end-line 88, :column 8, :line 88, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :private true, :name reagent.impl.util/merge-style, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2])), :test true}, memoize-1 {:protocol-inline nil, :meta {:arglists (quote ([f])), :end-column 16, :end-line 42, :column 7, :line 42, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/memoize-1, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, clear-container {:protocol-inline nil, :meta {:arglists (quote ([node])), :end-column 22, :end-line 108, :column 7, :line 108, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/clear-container, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 22, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :test true}, unmount-component-at-node {:protocol-inline nil, :meta {:arglists (quote ([container])), :end-column 32, :end-line 133, :column 7, :line 133, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/unmount-component-at-node, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 32, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container])), :test true}, ->partial-ifn {:protocol-inline nil, :meta {:arglists (quote ([f args p])), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :end-column 21, :end-line 69, :column 10, :line 69, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :name reagent.impl.util/->partial-ifn, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 21, :method-params ([f args p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 69, :end-line 69, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f args p])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :test true}, render-component {:protocol-inline nil, :meta {:arglists (quote ([comp container callback])), :end-column 23, :end-line 117, :column 7, :line 117, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/render-component, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 23, :method-params ([comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comp container callback])), :test true}, extract-children {:protocol-inline nil, :meta {:arglists (quote ([v])), :end-column 23, :end-line 16, :column 7, :line 16, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/extract-children, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 23, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, extract-props {:protocol-inline nil, :meta {:arglists (quote ([v])), :end-column 20, :end-line 12, :column 7, :line 12, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/extract-props, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 20, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, partial-ifn {:num-fields 3, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :name reagent.impl.util/partial-ifn, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 21, :type true, :column 10, :line 69, :record false, :end-line 69, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}}, get-children {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 19, :end-line 28, :column 7, :line 28, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/get-children, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 19, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, roots {:meta {:end-column 15, :end-line 106, :column 10, :line 106, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :file "resources/public/js/out/reagent/impl/util.cljs", :line 106, :column 1, :end-line 106, :end-column 15, :test true, :name reagent.impl.util/roots}, merge-class {:protocol-inline nil, :meta {:arglists (quote ([p1 p2])), :private true, :end-column 19, :end-line 80, :column 8, :line 80, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :private true, :name reagent.impl.util/merge-class, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2])), :test true}, is-client {:meta {:end-column 15, :end-line 7, :column 6, :line 7, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :file "resources/public/js/out/reagent/impl/util.cljs", :line 7, :column 1, :end-line 7, :end-column 15, :test true, :name reagent.impl.util/is-client}, cache-react-class {:protocol-inline nil, :meta {:arglists (quote ([c constructor])), :end-column 24, :end-line 37, :column 7, :line 37, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :name reagent.impl.util/cache-react-class, :variadic false, :file "resources/public/js/out/reagent/impl/util.cljs", :end-column 24, :method-params ([c constructor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c constructor])), :test true}, *always-update* {:meta {:dynamic true, :end-column 31, :end-line 104, :column 16, :line 104, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/util.cljs"}, :file "resources/public/js/out/reagent/impl/util.cljs", :line 104, :column 1, :end-line 104, :end-column 31, :dynamic true, :test true, :name reagent.impl.util/*always-update*}}, :require-macros {reagent.interop reagent.interop, reagent.debug reagent.debug}, :cljs.analyzer/constants {:order [:class :style :else], :seen #{:else :style :class}}, :doc nil}