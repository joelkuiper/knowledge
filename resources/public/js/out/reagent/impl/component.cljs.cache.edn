;; Analyzed by ClojureScript 0.0-3196
{:use-macros {dbg reagent.debug, .' reagent.interop, prn reagent.debug, dev? reagent.debug, .! reagent.interop}, :excludes #{}, :name reagent.impl.component, :imports nil, :requires {reagent.debug reagent.debug, reagent.interop reagent.interop, ratom reagent.ratom, reagent.ratom reagent.ratom, batch reagent.impl.batching, reagent.impl.batching reagent.impl.batching, reagent.impl.util reagent.impl.util, util reagent.impl.util}, :uses nil, :defs {elem-counter {:meta {:end-column 18, :end-line 230, :column 6, :line 230, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :file "resources/public/js/out/reagent/impl/component.cljs", :line 230, :column 1, :end-line 230, :end-column 18, :test true, :name reagent.impl.component/elem-counter}, get-wrapper {:protocol-inline nil, :meta {:arglists (quote ([key f name])), :end-column 18, :end-line 130, :column 7, :line 130, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/get-wrapper, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 18, :method-params ([key f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key f name])), :test true}, obligatory {:meta {:end-column 16, :end-line 139, :column 6, :line 139, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :file "resources/public/js/out/reagent/impl/component.cljs", :line 139, :column 1, :end-line 139, :end-column 16, :test true, :name reagent.impl.component/obligatory}, default-wrapper {:protocol-inline nil, :meta {:arglists (quote ([f])), :end-column 22, :end-line 116, :column 7, :line 116, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/default-wrapper, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 22, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, as-element {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 17, :end-line 22, :column 7, :line 22, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/as-element, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, do-render {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 16, :end-line 27, :column 7, :line 27, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/do-render, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, comp-name {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 16, :end-line 217, :column 7, :line 217, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/comp-name, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, add-obligatory {:protocol-inline nil, :meta {:arglists (quote ([fun-map])), :end-column 21, :end-line 150, :column 7, :line 150, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/add-obligatory, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 21, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map])), :test true}, state-atom {:protocol-inline nil, :meta {:arglists (quote ([this])), :end-column 17, :end-line 15, :column 7, :line 15, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/state-atom, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, dash-to-camel {:meta {:end-column 19, :end-line 143, :column 6, :line 143, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :file "resources/public/js/out/reagent/impl/component.cljs", :line 143, :column 1, :end-line 143, :end-column 19, :test true, :name reagent.impl.component/dash-to-camel}, static-fns {:meta {:end-column 16, :end-line 54, :column 6, :line 54, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :file "resources/public/js/out/reagent/impl/component.cljs", :line 54, :column 1, :end-line 54, :end-column 16, :test true, :name reagent.impl.component/static-fns}, reactify-component {:protocol-inline nil, :meta {:arglists (quote ([comp])), :end-column 25, :end-line 232, :column 7, :line 232, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/reactify-component, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 25, :method-params ([comp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([comp])), :test true}, map-to-js {:protocol-inline nil, :meta {:arglists (quote ([m])), :end-column 16, :end-line 193, :column 7, :line 193, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/map-to-js, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, *non-reactive* {:meta {:declared true, :dynamic true, :end-column 34, :end-line 11, :column 20, :line 11, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/*non-reactive*, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 34, :column 1, :dynamic true, :line 11, :declared true, :end-line 11, :test true}, dont-wrap {:meta {:end-column 15, :end-line 122, :column 6, :line 122, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :file "resources/public/js/out/reagent/impl/component.cljs", :line 122, :column 1, :end-line 122, :end-column 15, :test true, :name reagent.impl.component/dont-wrap}, fun-name {:protocol-inline nil, :meta {:arglists (quote ([f])), :end-column 15, :end-line 161, :column 7, :line 161, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/fun-name, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 15, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, *current-component* {:meta {:declared true, :dynamic true, :end-column 39, :end-line 9, :column 20, :line 9, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/*current-component*, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 39, :column 1, :dynamic true, :line 9, :declared true, :end-line 9, :test true}, camelify-map-keys {:protocol-inline nil, :meta {:arglists (quote ([fun-map])), :end-column 24, :end-line 145, :column 7, :line 145, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/camelify-map-keys, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 24, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map])), :test true}, shallow-obj-to-map {:protocol-inline nil, :meta {:arglists (quote ([o])), :end-column 25, :end-line 226, :column 7, :line 226, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/shallow-obj-to-map, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 25, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :test true}, cljsify {:protocol-inline nil, :meta {:arglists (quote ([body])), :end-column 14, :end-line 199, :column 7, :line 199, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/cljsify, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 14, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, dont-bind {:protocol-inline nil, :meta {:arglists (quote ([f])), :end-column 16, :end-line 124, :column 7, :line 124, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/dont-bind, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, add-render {:protocol-inline nil, :meta {:arglists (quote ([fun-map render-f name])), :end-column 17, :end-line 153, :column 7, :line 153, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/add-render, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 17, :method-params ([fun-map render-f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fun-map render-f name])), :test true}, custom-wrapper {:protocol-inline nil, :meta {:arglists (quote ([key f])), :end-column 21, :end-line 61, :column 7, :line 61, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/custom-wrapper, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 21, :method-params ([key f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key f])), :test true}, create-class {:protocol-inline nil, :meta {:arglists (quote ([body])), :end-column 19, :end-line 206, :column 7, :line 206, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/create-class, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 19, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, wrap-funs {:protocol-inline nil, :meta {:arglists (quote ([fmap])), :end-column 16, :end-line 171, :column 7, :line 171, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/reagent/impl/component.cljs"}, :name reagent.impl.component/wrap-funs, :variadic false, :file "resources/public/js/out/reagent/impl/component.cljs", :end-column 16, :method-params ([fmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fmap])), :test true}}, :require-macros {reagent.debug reagent.debug, reagent.interop reagent.interop}, :cljs.analyzer/constants {:order [:render :cljsRender :reagentRender :cljsName :shouldComponentUpdate :componentWillMount :componentWillUnmount :name :componentFunction :displayName :-elem-count], :seen #{:displayName :cljsRender :name :componentWillUnmount :shouldComponentUpdate :reagentRender :render :cljsName :-elem-count :componentFunction :componentWillMount}}, :doc nil}