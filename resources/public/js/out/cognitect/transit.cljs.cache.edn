;; Analyzed by ClojureScript 0.0-3196
{:use-macros nil, :excludes #{integer?}, :name cognitect.transit, :imports {Long goog.math.Long}, :requires {Long goog.math.Long, eq com.cognitect.transit.eq, com.cognitect.transit.eq com.cognitect.transit.eq, ty com.cognitect.transit.types, com.cognitect.transit.types com.cognitect.transit.types, com.cognitect.transit com.cognitect.transit, t com.cognitect.transit}, :uses nil, :defs {uri {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Construct a URI from a string.", :end-column 10, :end-line 314, :column 7, :line 314, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/uri, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 10, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a URI from a string.", :test true}, t42580 {:num-fields 5, :protocols #{cognitect.transit/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cognitect.transit/t42580, :file "resources/public/js/out/cognitect/transit.cljs", :type true, :anonymous true, :column 6, :line 260, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, uuid {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Construct a UUID from a string.", :end-column 11, :end-line 324, :column 7, :line 324, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/uuid, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a UUID from a string.", :test true}, KeywordHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/KeywordHandler, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 33, :type true, :column 19, :line 124, :record false, :end-line 124, :skip-protocol-flag nil}, VectorHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/VectorHandler, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 32, :type true, :column 19, :line 160, :record false, :end-line 160, :skip-protocol-flag nil}, bigint? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Returns true if x is a transit big integer value, false otherwise.", :end-column 14, :end-line 299, :column 7, :line 299, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/bigint?, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit big integer value, false otherwise.", :test true}, MapBuilder {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/MapBuilder, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 29, :type true, :column 19, :line 76, :record false, :end-line 76, :skip-protocol-flag nil}, ->UUIDHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs", :end-column 30, :column 19, :factory :positional, :line 169, :end-line 169, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->UUIDHandler, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 169, :end-line 169, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, ->MapBuilder {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs", :end-column 29, :column 19, :factory :positional, :line 76, :end-line 76, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->MapBuilder, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 76, :end-line 76, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, ->KeywordHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs", :end-column 33, :column 19, :factory :positional, :line 124, :end-line 124, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->KeywordHandler, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 124, :end-line 124, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, binary {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Construct a transit binary value. s should be base64 encoded\n   string.", :end-column 13, :end-line 334, :column 7, :line 334, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/binary, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 334, :end-line 334, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a transit binary value. s should be base64 encoded\n   string.", :test true}, ->SymbolHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs", :end-column 32, :column 19, :factory :positional, :line 130, :end-line 130, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->SymbolHandler, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 130, :end-line 130, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, write-handler {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :arglists ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :arglists-meta (nil nil nil)}, :arglists (quote ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn])), :doc "Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.", :end-column 20, :end-line 251, :column 7, :line 251, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/write-handler, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :arglists ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :arglists-meta (nil nil nil)}, :method-params ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 4, :fn-var true, :arglists ([tag-fn rep-fn] [tag-fn rep-fn str-rep-fn] [tag-fn rep-fn str-rep-fn verbose-handler-fn]), :doc "Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.", :test true}, VectorBuilder {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/VectorBuilder, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 32, :type true, :column 19, :line 83, :record false, :end-line 83, :skip-protocol-flag nil}, read {:protocol-inline nil, :meta {:arglists (quote ([r str])), :doc "Read a transit encoded string into ClojureScript values given a \n   transit reader.", :end-column 11, :end-line 118, :column 7, :line 118, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/read, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 11, :method-params ([r str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([r str])), :doc "Read a transit encoded string into ClojureScript values given a \n   transit reader.", :test true}, uri? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Returns true if x is a transit URI value, false otherwise.", :end-column 11, :end-line 319, :column 7, :line 319, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/uri?, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit URI value, false otherwise.", :test true}, binary? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Returns true if x is a transit binary value, false otherwise.", :end-column 14, :end-line 340, :column 7, :line 340, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/binary?, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit binary value, false otherwise.", :test true}, ->MapHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs", :end-column 29, :column 19, :factory :positional, :line 145, :end-line 145, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->MapHandler, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 145, :end-line 145, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, MapHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/MapHandler, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 29, :type true, :column 19, :line 145, :record false, :end-line 145, :skip-protocol-flag nil}, bigint {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Construct a big integer from a string.", :end-column 13, :end-line 294, :column 7, :line 294, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/bigint, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a big integer from a string.", :test true}, bigdec? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Returns true if x is a transit big decimal value, false otherwise.", :end-column 14, :end-line 309, :column 7, :line 309, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/bigdec?, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit big decimal value, false otherwise.", :test true}, SetHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/SetHandler, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 29, :type true, :column 19, :line 151, :record false, :end-line 151, :skip-protocol-flag nil}, SymbolHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/SymbolHandler, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 32, :type true, :column 19, :line 130, :record false, :end-line 130, :skip-protocol-flag nil}, tagged-value {:protocol-inline nil, :meta {:arglists (quote ([tag rep])), :doc "Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value.", :end-column 19, :end-line 270, :column 7, :line 270, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/tagged-value, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 19, :method-params ([tag rep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag rep])), :doc "Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value.", :test true}, ->ListHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs", :end-column 30, :column 19, :factory :positional, :line 136, :end-line 136, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->ListHandler, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 136, :end-line 136, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, ->VectorHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs", :end-column 32, :column 19, :factory :positional, :line 160, :end-line 160, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->VectorHandler, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 160, :end-line 160, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, ListHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/ListHandler, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 30, :type true, :column 19, :line 136, :record false, :end-line 136, :skip-protocol-flag nil}, ->SetHandler {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs", :end-column 29, :column 19, :factory :positional, :line 151, :end-line 151, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->SetHandler, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 151, :end-line 151, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, UUIDHandler {:no-doc true, :num-fields 0, :protocols #{cognitect.transit/Object}, :name cognitect.transit/UUIDHandler, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 30, :type true, :column 19, :line 169, :record false, :end-line 169, :skip-protocol-flag nil}, tagged-value? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Returns true if x is a transit tagged value, false otherwise.", :end-column 20, :end-line 276, :column 7, :line 276, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/tagged-value?, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit tagged value, false otherwise.", :test true}, read-handler {:protocol-inline nil, :meta {:arglists (quote ([from-rep])), :doc "Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj", :end-column 19, :end-line 245, :column 7, :line 245, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/read-handler, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 19, :method-params ([from-rep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 1, :fn-var true, :arglists (quote ([from-rep])), :doc "Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj", :test true}, write {:protocol-inline nil, :meta {:arglists (quote ([w o])), :doc "Encode an object into a transit string given a transit writer.", :end-column 12, :end-line 240, :column 7, :line 240, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/write, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 12, :method-params ([w o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([w o])), :doc "Encode an object into a transit string given a transit writer.", :test true}, integer? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise.", :end-column 15, :end-line 288, :column 7, :line 288, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/integer?, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise.", :test true}, link? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Returns true if x a transit link value, false if otherwise.", :end-column 12, :end-line 365, :column 7, :line 365, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/link?, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x a transit link value, false if otherwise.", :test true}, integer {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number.", :end-column 14, :end-line 281, :column 7, :line 281, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/integer, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number.", :test true}, uuid? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Returns true if x is a transit UUID value, false otherwise.", :end-column 12, :end-line 329, :column 7, :line 329, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/uuid?, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 329, :end-line 329, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit UUID value, false otherwise.", :test true}, bigdec {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Construct a big decimal from a string.", :end-column 13, :end-line 304, :column 7, :line 304, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/bigdec, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Construct a big decimal from a string.", :test true}, ->t42580 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([verbose-handler-fn str-rep-fn rep-fn tag-fn meta42581])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cognitect.transit/Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cognitect.transit/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cognitect.transit/->t42580, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :method-params ([verbose-handler-fn str-rep-fn rep-fn tag-fn meta42581]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 260, :max-fixed-arity 5, :fn-var true, :arglists (quote ([verbose-handler-fn str-rep-fn rep-fn tag-fn meta42581])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, writer {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type opts]), :arglists ([type] [type opts]), :arglists-meta (nil nil)}, :arglists (quote ([type] [type opts])), :doc "Return a transit writer. type maybe either :json or :json-verbose.\n  opts is a map containing a :handlers entry. :handlers is a map of\n  type constructors to handler instances.", :end-column 13, :end-line 175, :column 7, :line 175, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/writer, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type opts]), :arglists ([type] [type opts]), :arglists-meta (nil nil)}, :method-params ([type] [type opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists ([type] [type opts]), :doc "Return a transit writer. type maybe either :json or :json-verbose.\n  opts is a map containing a :handlers entry. :handlers is a map of\n  type constructors to handler instances.", :test true}, link {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link.", :end-column 11, :end-line 356, :column 7, :line 356, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/link, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link.", :test true}, quoted? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Returns true if x is a transit quoted value, false otherwise.", :end-column 14, :end-line 351, :column 7, :line 351, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/quoted?, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a transit quoted value, false otherwise.", :test true}, ->VectorBuilder {:no-doc true, :protocol-inline nil, :meta {:no-doc true, :protocols #{cognitect.transit/Object}, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs", :end-column 32, :column 19, :factory :positional, :line 83, :end-line 83, :arglists (quote ([])), :skip-protocol-flag nil}, :protocols #{cognitect.transit/Object}, :name cognitect.transit/->VectorBuilder, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 83, :end-line 83, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil, :test true}, reader {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type opts]), :arglists ([type] [type opts]), :arglists-meta (nil nil)}, :arglists (quote ([type] [type opts])), :doc "Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from tag to a decoder function which returns\n   then in-memory representation of the semantic transit value.", :end-column 13, :end-line 90, :column 7, :line 90, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/reader, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type opts]), :arglists ([type] [type opts]), :arglists-meta (nil nil)}, :method-params ([type] [type opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists ([type] [type opts]), :doc "Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from tag to a decoder function which returns\n   then in-memory representation of the semantic transit value.", :test true}, opts-merge {:no-doc true, :protocol-inline nil, :meta {:arglists (quote ([a b])), :no-doc true, :end-column 26, :end-line 70, :column 16, :line 70, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/opts-merge, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 26, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :test true}, quoted {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Construct a quoted transit value. x should be a transit\n   encodeable value.", :end-column 13, :end-line 345, :column 7, :line 345, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cognitect/transit.cljs"}, :name cognitect.transit/quoted, :variadic false, :file "resources/public/js/out/cognitect/transit.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 345, :end-line 345, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Construct a quoted transit value. x should be a transit\n   encodeable value.", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else :handlers], :seen #{:else :handlers}}, :doc nil}