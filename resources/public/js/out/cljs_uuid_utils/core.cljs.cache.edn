;; Analyzed by ClojureScript 0.0-3196
{:use-macros nil, :excludes #{}, :name cljs-uuid-utils.core, :imports nil, :requires {clojure.string clojure.string, string clojure.string}, :uses nil, :defs {make-uuid-from {:protocol-inline nil, :meta {:arglists (quote ([maybe-uuid])), :doc "(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \"NO-WAY\")  =>  nil\n  (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"YES-WAY\"))  => nil", :end-column 21, :end-line 113, :column 7, :line 113, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cljs_uuid_utils/core.cljs"}, :name cljs-uuid-utils.core/make-uuid-from, :variadic false, :file "resources/public/js/out/cljs_uuid_utils/core.cljs", :end-column 21, :method-params ([maybe-uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([maybe-uuid])), :doc "(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \"NO-WAY\")  =>  nil\n  (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"YES-WAY\"))  => nil", :test true}, valid-uuid? {:protocol-inline nil, :meta {:arglists (quote ([maybe-uuid])), :doc "(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \"NO-WAY\")  =>  nil\n  (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"YES-WAY\"))  => nil", :end-column 18, :end-line 87, :column 7, :line 87, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cljs_uuid_utils/core.cljs"}, :name cljs-uuid-utils.core/valid-uuid?, :variadic false, :file "resources/public/js/out/cljs_uuid_utils/core.cljs", :end-column 18, :method-params ([maybe-uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([maybe-uuid])), :doc "(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \"NO-WAY\")  =>  nil\n  (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"YES-WAY\"))  => nil", :test true}, uuid-regex {:meta {:private true, :end-column 26, :end-line 82, :column 16, :line 82, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cljs_uuid_utils/core.cljs"}, :file "resources/public/js/out/cljs_uuid_utils/core.cljs", :line 82, :column 1, :end-line 82, :end-column 26, :private true, :test true, :name cljs-uuid-utils.core/uuid-regex}, make-random-uuid {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-uuid)) => cljs.core/UUID", :end-column 23, :end-line 61, :column 7, :line 61, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cljs_uuid_utils/core.cljs"}, :name cljs-uuid-utils.core/make-random-uuid, :variadic false, :file "resources/public/js/out/cljs_uuid_utils/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-uuid)) => cljs.core/UUID", :test true}, make-random-squuid {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-squuid)) => cljs.core/UUID", :end-column 25, :end-line 37, :column 7, :line 37, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cljs_uuid_utils/core.cljs"}, :name cljs-uuid-utils.core/make-random-squuid, :variadic false, :file "resources/public/js/out/cljs_uuid_utils/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-squuid)) => cljs.core/UUID", :test true}, uuid-string {:protocol-inline nil, :meta {:arglists (quote ([a-uuid])), :doc "(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\"", :end-column 18, :end-line 21, :column 7, :line 21, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/cljs_uuid_utils/core.cljs"}, :name cljs-uuid-utils.core/uuid-string, :variadic false, :file "resources/public/js/out/cljs_uuid_utils/core.cljs", :end-column 18, :method-params ([a-uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a-uuid])), :doc "(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\"", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:true], :seen #{:true}}, :doc "ClojureScript micro-library with an implementation of a type 4, random UUID generator compatible with RFC-4122 and cljs.core/UUID (make-random-uuid), a getter function to obtain the uuid string representation from a UUID-instance (uuid-string), a uuid-string conformance validating predicate (valid-uuid?), and a UUID factory from uuid-string with conformance validation (make-uuid-from)."}