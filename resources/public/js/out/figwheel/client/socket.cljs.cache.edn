;; Analyzed by ClojureScript 0.0-3196
{:use-macros nil, :excludes #{}, :name figwheel.client.socket, :imports nil, :requires {cljs.reader cljs.reader, figwheel.client.utils figwheel.client.utils, utils figwheel.client.utils}, :uses {read-string cljs.reader}, :defs {open {:protocol-inline nil, :meta {:arglists (quote ([{:keys [retry-count retried-count websocket-url build-id], :as opts}])), :end-column 11, :end-line 50, :column 7, :line 50, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/figwheel/client/socket.cljs"}, :name figwheel.client.socket/open, :variadic false, :file "resources/public/js/out/figwheel/client/socket.cljs", :end-column 11, :method-params ([p__37207]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [retry-count retried-count websocket-url build-id], :as opts}])), :test true}, close! {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 13, :end-line 46, :column 7, :line 46, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/figwheel/client/socket.cljs"}, :name figwheel.client.socket/close!, :variadic false, :file "resources/public/js/out/figwheel/client/socket.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, send! {:protocol-inline nil, :meta {:arglists (quote ([msg])), :doc "Send a end message to the server.", :end-column 12, :end-line 40, :column 7, :line 40, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/figwheel/client/socket.cljs"}, :name figwheel.client.socket/send!, :variadic false, :file "resources/public/js/out/figwheel/client/socket.cljs", :end-column 12, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :doc "Send a end message to the server.", :test true}, socket-atom {:meta {:end-column 21, :end-line 38, :column 10, :line 38, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/figwheel/client/socket.cljs"}, :file "resources/public/js/out/figwheel/client/socket.cljs", :line 38, :column 1, :end-line 38, :end-column 21, :test true, :name figwheel.client.socket/socket-atom}, message-history-atom {:meta {:end-column 30, :end-line 36, :column 10, :line 36, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/figwheel/client/socket.cljs"}, :file "resources/public/js/out/figwheel/client/socket.cljs", :line 36, :column 1, :end-line 36, :end-column 30, :test true, :name figwheel.client.socket/message-history-atom}, get-websocket-imp {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 24, :end-line 7, :column 7, :line 7, :file "/Users/joelkuiper/Repositories/knowledge/resources/public/js/out/figwheel/client/socket.cljs"}, :name figwheel.client.socket/get-websocket-imp, :variadic false, :file "resources/public/js/out/figwheel/client/socket.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else :build-id :websocket-url :retried-count :retry-count :debug :msg-name :ping], :seen #{:ping :retried-count :else :debug :build-id :websocket-url :msg-name :retry-count}}, :doc nil}